>>>"Mark Word" reference from letsgo/src/main/schematic/markword-lock.png and com/thomax/letsgo/advanced/jvm/JVM/2.3 OOP-Klass对象模型
>>>在synchronized优化以前，synchronized的性能是比ReentrantLock差很多的，从JDK1.6开始HotSpot虚拟机团队花费了大量精力去优化synchronized的锁技术。
   自从synchronized引入了偏向锁、轻量级锁（自旋锁）后，两者的性能就差不多了，如下：

自旋锁 {
    *宏观：线程执行时间小于上下文切换时间，从而提升性能
    1.如果平均负载小于CPUs则一直自旋
    2.如果有超过(CPUs/2)个线程正在自旋，则后来线程直接阻塞
    3.如果正在自旋的线程发现Owner发生了变化则延迟自旋时间（自旋计数）或进入阻塞
    4.如果CPU处于节电模式则停止自旋
    5.自旋时间的最坏情况是CPU的存储延迟（CPU A存储了一个数据，到CPU B得知这个数据直接的时间差）
    6.自旋时会适当放弃线程优先级之间的差异
}

重量级锁 {
    1.Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中
    2.Entry List：竞争队列中那些有资格成为候选资源的线程被移动到Entry List中
    3.Wait Set：哪些调用wait方法被阻塞的线程被放置在这里
    4.OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck
    5.Owner：当前已经获取到所资源的线程被称为Owner
    6.!Owner：当前释放锁的线程
}

偏向锁 {
    1.访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01，确认为可偏向状态
    2.如果为可偏向状态，则测试线程ID是否指向当前线程，如果是，进入步骤5，否则进入步骤3
    3.如果线程ID并未指向当前线程，则通过CAS操作竞争锁。如果竞争成功，则将Mark Word中线程ID设置为当前线程ID，然后执行5；如果竞争失败，执行4。
    4.如果CAS获取偏向锁失败，则表示有竞争。当到达全局安全点（safepoint）时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁
      然后被阻塞在安全点的线程继续往下执行同步代码。（撤销偏向锁的时候会导致stop the word）
    5.执行同步代码
}

轻量级锁 {
    1.在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，
      用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word
    2.拷贝对象头中的Mark Word复制到锁记录中
    3.拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock record里的owner指针指向object mark word。如果更新成功，则执行步骤4，否则执行步骤5
    4.如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态
    5.如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。
      否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。
      而当前线程便尝试使用自旋来获取锁，自旋就是为了不让线程阻塞，而采用循环去获取锁的过程
}

*上下文切换属于计算密集型，开销大概5000~10000个时钟周期，大概几微秒
*减少锁的持有时间也是对性能有极大提升，即排除那些并非需要同步的逻辑块
*在竞争程度较高下，ReentrantLock会比CAS吞吐率高一点点，因为锁能更有效地避免竞争；在竞争程度适中下，CAS会比ReentrantLock吞吐率高一倍多，极限情况是单CPU中CAS一定会执行成功所以不会出现锁的阻塞情况
*如果判断一段代码中，堆上的数据不会逃逸出去而被其他线程访问到，那就可以把它们当做栈上的数据对待，人为他们是线程私有的，会对已经加锁的对象进行"锁消除"
 如果有一段代码反复进行锁操作，比如锁竞争出现在一个循环体内，那会造成不必要的性能损耗，这时候就需要"锁粗化"来增加锁的作用范围尽可能的减少锁的竞争

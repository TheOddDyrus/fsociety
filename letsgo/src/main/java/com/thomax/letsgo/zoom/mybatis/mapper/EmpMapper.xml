<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 动态代理方法:
	① 接口的完全限定名与xml 文件中的namespace 要一致。
	② 接口中的方法名与xml 文件中的某个标签的id 名称一致。
	③ 接口中的方法的返回值（如果是集合，则是集合元素的类型）类型与xml 文件中的resultType 一致。
	④ 接口中的方法的参数类型与xml 文件中的parameterType 一致。 -->
<mapper namespace="mybatis.mapper.IEmpMapper">

	<!-- #{}和${}的区别：
		1.#{}表示一个占位符号，通过#{}可以实现preparedStatement 向占位符中设置值，自动
			进行java 类型和jdbc 类型转换。#{}可以有效防止sql 注入。#{}可以接收简单类型值或pojo
			属性值。如果parameterType 传输单个简单类型值，#{}中可以写自定义名称；如果是传输一个对象，
			需要与对象的属性名一致。
		2.${}表示拼接sql 串，通过${}可以将parameterType 传入的内容拼接在sql 中且不进行
			jdbc 类型转换， ${}可以接收简单类型值或pojo 属性值，如果parameterType 传输单个简单
			类型值，${}括号中只能是value。
	 -->

	<!-- 查询 -->
	<select id="findAll" resultType="emp">
		SELECT * FROM emp
	</select>
	<!-- 第一种优化：如果数据库字段名与映射的类的属性名不一致，用as来解决 -->
	<select id="findAllX" resultType="empX">
		SELECT empno as empnoX, ename as enameX, job as jobX, mgr as mgrX, hiredate as hiredateX, 
			   sal as salX, comm as commX, deptno as deptnoX 
		  FROM emp
	</select>
	<!-- 第二种优化：如果数据库字段名与映射的类的属性名不一致，用ResultMap结果集映射解决
			parameterType: 参数格式, parameterMap: 参数的映射格式
			resultType: 结果集格式, resultMap: 结果集的映射格式
			id:映射主键, result:映射除主键外的其它字段
		 	column:代表表的列名, property:代表java对象的属性名 -->
	<resultMap type="EmPx" id="empMap">
		<id column="empno" property="empnoX"/>
		<result column="ename" property="enameX"/>
		<result column="job" property="jobX"/>
		<result column="mgr" property="mgrX"/>
		<result column="hiredate" property="hiredateX"/>
		<result column="sal" property="salX"/>
		<result column="comm" property="commX"/>
		<result column="deptno" property="deptnoX"/>
	</resultMap>
	<select id="findAllByMap" resultMap="empMap">
		SELECT * FROM emp
	</select>
	
	<!-- 模糊查询：第一种，使用#{}，不能在SQL内写'%#{customName}%' -->
	<select id="findEmpsByFuzzy1" parameterType="string" resultType="EMP">
		SELECT * FROM emp WHERE ename LIKE #{customName}
	</select>
	<!-- 模糊查询：第二种，使用${} （建议使用） -->
	<select id="findEmpsByFuzzy2" parameterType="string" resultType="eMp">
		SELECT * FROM emp WHERE ename LIKE '%${value}%'
	</select>
		
	<!-- 新增 -->
	<insert id="save" parameterType="mybatis.domain.Emp">
		<!-- 对于Oracle的自增序列的处理
		<selectKey keyProperty="empno" order="BEFORE" resultType="integer">
			SELECT emp_seq.nextval from dual
		</selectKey> -->
		INSERT INTO emp VALUES(#{empno}, #{ename}, #{job}, #{mgr}, #{hiredate}, #{sal}, #{comm}, #{deptno})
	</insert>
	
	<!-- 删除 -->
	<update id="remove" parameterType="integer">
		<!-- DELETE FROM emp WHERE empno = ${value} -->
		DELETE FROM emp WHERE empno = #{customName}
	</update>
</mapper>